<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="405.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="80219"><g><title>rubiks-cube`&lt;rubiks_cube::thistlethwaite::g2g4::CubePositions as core::hash::Hash&gt;::hash (12 samples, 0.01%)</title><rect x="0.1970%" y="229" width="0.0150%" height="15" fill="rgb(227,0,7)" fg:x="158" fg:w="12"/><text x="0.4470%" y="239.50"></text></g><g><title>rubiks-cube`hashbrown::raw::RawTable&lt;T,A&gt;::insert (21 samples, 0.03%)</title><rect x="0.1945%" y="245" width="0.0262%" height="15" fill="rgb(217,0,24)" fg:x="156" fg:w="21"/><text x="0.4445%" y="255.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::enumerate_g3_pos (176 samples, 0.22%)</title><rect x="0.0025%" y="261" width="0.2194%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="176"/><text x="0.2525%" y="271.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g0g1::solve_to_g1 (116 samples, 0.14%)</title><rect x="0.2219%" y="245" width="0.1446%" height="15" fill="rgb(248,212,6)" fg:x="178" fg:w="116"/><text x="0.4719%" y="255.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g0g1::solve_to_g1::ida (116 samples, 0.14%)</title><rect x="0.2219%" y="229" width="0.1446%" height="15" fill="rgb(208,68,35)" fg:x="178" fg:w="116"/><text x="0.4719%" y="239.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g0g1::solve_to_g1::ida (116 samples, 0.14%)</title><rect x="0.2219%" y="213" width="0.1446%" height="15" fill="rgb(232,128,0)" fg:x="178" fg:w="116"/><text x="0.4719%" y="223.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g0g1::solve_to_g1::ida (116 samples, 0.14%)</title><rect x="0.2219%" y="197" width="0.1446%" height="15" fill="rgb(207,160,47)" fg:x="178" fg:w="116"/><text x="0.4719%" y="207.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g0g1::solve_to_g1::ida (116 samples, 0.14%)</title><rect x="0.2219%" y="181" width="0.1446%" height="15" fill="rgb(228,23,34)" fg:x="178" fg:w="116"/><text x="0.4719%" y="191.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g0g1::solve_to_g1::ida (110 samples, 0.14%)</title><rect x="0.2294%" y="165" width="0.1371%" height="15" fill="rgb(218,30,26)" fg:x="184" fg:w="110"/><text x="0.4794%" y="175.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g0g1::solve_to_g1::ida (94 samples, 0.12%)</title><rect x="0.2493%" y="149" width="0.1172%" height="15" fill="rgb(220,122,19)" fg:x="200" fg:w="94"/><text x="0.4993%" y="159.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g0g1::solve_to_g1::ida (34 samples, 0.04%)</title><rect x="0.3241%" y="133" width="0.0424%" height="15" fill="rgb(250,228,42)" fg:x="260" fg:w="34"/><text x="0.5741%" y="143.50"></text></g><g><title>rubiks-cube`&lt;T as rubiks_cube::moves::ApplyMove&gt;::apply (36 samples, 0.04%)</title><rect x="0.4039%" y="149" width="0.0449%" height="15" fill="rgb(240,193,28)" fg:x="324" fg:w="36"/><text x="0.6539%" y="159.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g1g2::full_state::G1State::is_solved (11 samples, 0.01%)</title><rect x="0.4488%" y="149" width="0.0137%" height="15" fill="rgb(216,20,37)" fg:x="360" fg:w="11"/><text x="0.6988%" y="159.50"></text></g><g><title>rubiks-cube`&lt;T as rubiks_cube::moves::ApplyMove&gt;::apply (276 samples, 0.34%)</title><rect x="0.5946%" y="133" width="0.3441%" height="15" fill="rgb(206,188,39)" fg:x="477" fg:w="276"/><text x="0.8446%" y="143.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g1g2::full_state::G1State::is_solved (36 samples, 0.04%)</title><rect x="0.9387%" y="133" width="0.0449%" height="15" fill="rgb(217,207,13)" fg:x="753" fg:w="36"/><text x="1.1887%" y="143.50"></text></g><g><title>rubiks-cube`&lt;T as rubiks_cube::moves::ApplyMove&gt;::apply (1,031 samples, 1.29%)</title><rect x="1.7577%" y="117" width="1.2852%" height="15" fill="rgb(231,73,38)" fg:x="1410" fg:w="1031"/><text x="2.0077%" y="127.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g1g2::full_state::G1State::is_solved (238 samples, 0.30%)</title><rect x="3.0429%" y="117" width="0.2967%" height="15" fill="rgb(225,20,46)" fg:x="2441" fg:w="238"/><text x="3.2929%" y="127.50"></text></g><g><title>rubiks-cube`&lt;T as rubiks_cube::moves::ApplyMove&gt;::apply (1,499 samples, 1.87%)</title><rect x="5.6483%" y="101" width="1.8686%" height="15" fill="rgb(210,31,41)" fg:x="4531" fg:w="1499"/><text x="5.8983%" y="111.50">r..</text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g1g2::full_state::G1State::is_solved (835 samples, 1.04%)</title><rect x="7.5169%" y="101" width="1.0409%" height="15" fill="rgb(221,200,47)" fg:x="6030" fg:w="835"/><text x="7.7669%" y="111.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g1g2::solve_to_g2 (6,752 samples, 8.42%)</title><rect x="0.3665%" y="245" width="8.4170%" height="15" fill="rgb(226,26,5)" fg:x="294" fg:w="6752"/><text x="0.6165%" y="255.50">rubiks-cube`..</text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g1g2::solve_to_g2::ida (6,752 samples, 8.42%)</title><rect x="0.3665%" y="229" width="8.4170%" height="15" fill="rgb(249,33,26)" fg:x="294" fg:w="6752"/><text x="0.6165%" y="239.50">rubiks-cube`..</text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g1g2::solve_to_g2::ida (6,752 samples, 8.42%)</title><rect x="0.3665%" y="213" width="8.4170%" height="15" fill="rgb(235,183,28)" fg:x="294" fg:w="6752"/><text x="0.6165%" y="223.50">rubiks-cube`..</text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g1g2::solve_to_g2::ida (6,752 samples, 8.42%)</title><rect x="0.3665%" y="197" width="8.4170%" height="15" fill="rgb(221,5,38)" fg:x="294" fg:w="6752"/><text x="0.6165%" y="207.50">rubiks-cube`..</text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g1g2::solve_to_g2::ida (6,749 samples, 8.41%)</title><rect x="0.3702%" y="181" width="8.4132%" height="15" fill="rgb(247,18,42)" fg:x="297" fg:w="6749"/><text x="0.6202%" y="191.50">rubiks-cube`..</text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g1g2::solve_to_g2::ida (6,741 samples, 8.40%)</title><rect x="0.3802%" y="165" width="8.4032%" height="15" fill="rgb(241,131,45)" fg:x="305" fg:w="6741"/><text x="0.6302%" y="175.50">rubiks-cube`..</text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g1g2::solve_to_g2::ida (6,675 samples, 8.32%)</title><rect x="0.4625%" y="149" width="8.3210%" height="15" fill="rgb(249,31,29)" fg:x="371" fg:w="6675"/><text x="0.7125%" y="159.50">rubiks-cube`..</text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g1g2::solve_to_g2::ida (6,257 samples, 7.80%)</title><rect x="0.9836%" y="133" width="7.7999%" height="15" fill="rgb(225,111,53)" fg:x="789" fg:w="6257"/><text x="1.2336%" y="143.50">rubiks-cube..</text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g1g2::solve_to_g2::ida (4,367 samples, 5.44%)</title><rect x="3.3396%" y="117" width="5.4438%" height="15" fill="rgb(238,160,17)" fg:x="2679" fg:w="4367"/><text x="3.5896%" y="127.50">rubiks-..</text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g1g2::solve_to_g2::ida (181 samples, 0.23%)</title><rect x="8.5578%" y="101" width="0.2256%" height="15" fill="rgb(214,148,48)" fg:x="6865" fg:w="181"/><text x="8.8078%" y="111.50"></text></g><g><title>rubiks-cube`&lt;T as rubiks_cube::moves::ApplyMove&gt;::apply (24 samples, 0.03%)</title><rect x="8.8046%" y="149" width="0.0299%" height="15" fill="rgb(232,36,49)" fg:x="7063" fg:w="24"/><text x="9.0546%" y="159.50"></text></g><g><title>rubiks-cube`&lt;T as rubiks_cube::moves::ApplyMove&gt;::apply (125 samples, 0.16%)</title><rect x="8.8869%" y="133" width="0.1558%" height="15" fill="rgb(209,103,24)" fg:x="7129" fg:w="125"/><text x="9.1369%" y="143.50"></text></g><g><title>rubiks-cube`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (13 samples, 0.02%)</title><rect x="9.0490%" y="133" width="0.0162%" height="15" fill="rgb(229,88,8)" fg:x="7259" fg:w="13"/><text x="9.2990%" y="143.50"></text></g><g><title>rubiks-cube`&lt;T as rubiks_cube::moves::ApplyMove&gt;::apply (498 samples, 0.62%)</title><rect x="9.2983%" y="117" width="0.6208%" height="15" fill="rgb(213,181,19)" fg:x="7459" fg:w="498"/><text x="9.5483%" y="127.50"></text></g><g><title>rubiks-cube`&lt;rubiks_cube::thistlethwaite::g2g4::CubePositions as core::hash::Hash&gt;::hash (37 samples, 0.05%)</title><rect x="9.9191%" y="117" width="0.0461%" height="15" fill="rgb(254,191,54)" fg:x="7957" fg:w="37"/><text x="10.1691%" y="127.50"></text></g><g><title>rubiks-cube`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (78 samples, 0.10%)</title><rect x="9.9652%" y="117" width="0.0972%" height="15" fill="rgb(241,83,37)" fg:x="7994" fg:w="78"/><text x="10.2152%" y="127.50"></text></g><g><title>rubiks-cube`&lt;T as rubiks_cube::moves::ApplyMove&gt;::apply (2,297 samples, 2.86%)</title><rect x="10.9475%" y="101" width="2.8634%" height="15" fill="rgb(233,36,39)" fg:x="8782" fg:w="2297"/><text x="11.1975%" y="111.50">ru..</text></g><g><title>rubiks-cube`&lt;rubiks_cube::thistlethwaite::g2g4::CubePositions as core::hash::Hash&gt;::hash (175 samples, 0.22%)</title><rect x="13.8109%" y="101" width="0.2182%" height="15" fill="rgb(226,3,54)" fg:x="11079" fg:w="175"/><text x="14.0609%" y="111.50"></text></g><g><title>rubiks-cube`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (342 samples, 0.43%)</title><rect x="14.0291%" y="101" width="0.4263%" height="15" fill="rgb(245,192,40)" fg:x="11254" fg:w="342"/><text x="14.2791%" y="111.50"></text></g><g><title>rubiks-cube`&lt;T as rubiks_cube::moves::ApplyMove&gt;::apply (7,992 samples, 9.96%)</title><rect x="18.3273%" y="85" width="9.9627%" height="15" fill="rgb(238,167,29)" fg:x="14702" fg:w="7992"/><text x="18.5773%" y="95.50">rubiks-cube`&lt;T..</text></g><g><title>rubiks-cube`&lt;rubiks_cube::thistlethwaite::g2g4::CubePositions as core::hash::Hash&gt;::hash (711 samples, 0.89%)</title><rect x="28.2901%" y="85" width="0.8863%" height="15" fill="rgb(232,182,51)" fg:x="22694" fg:w="711"/><text x="28.5401%" y="95.50"></text></g><g><title>rubiks-cube`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1,257 samples, 1.57%)</title><rect x="29.1764%" y="85" width="1.5670%" height="15" fill="rgb(231,60,39)" fg:x="23405" fg:w="1257"/><text x="29.4264%" y="95.50"></text></g><g><title>rubiks-cube`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (45 samples, 0.06%)</title><rect x="41.7333%" y="69" width="0.0561%" height="15" fill="rgb(208,69,12)" fg:x="33478" fg:w="45"/><text x="41.9833%" y="79.50"></text></g><g><title>rubiks-cube`&lt;T as rubiks_cube::moves::ApplyMove&gt;::apply (1,275 samples, 1.59%)</title><rect x="41.7894%" y="69" width="1.5894%" height="15" fill="rgb(235,93,37)" fg:x="33523" fg:w="1275"/><text x="42.0394%" y="79.50"></text></g><g><title>rubiks-cube`&lt;rubiks_cube::thistlethwaite::g2g4::CubePositions as core::hash::Hash&gt;::hash (3,707 samples, 4.62%)</title><rect x="43.3788%" y="69" width="4.6211%" height="15" fill="rgb(213,116,39)" fg:x="34798" fg:w="3707"/><text x="43.6288%" y="79.50">rubik..</text></g><g><title>rubiks-cube`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (5,554 samples, 6.92%)</title><rect x="47.9999%" y="69" width="6.9235%" height="15" fill="rgb(222,207,29)" fg:x="38505" fg:w="5554"/><text x="48.2499%" y="79.50">rubiks-cu..</text></g><g><title>rubiks-cube`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (128 samples, 0.16%)</title><rect x="58.2705%" y="53" width="0.1596%" height="15" fill="rgb(206,96,30)" fg:x="46744" fg:w="128"/><text x="58.5205%" y="63.50"></text></g><g><title>rubiks-cube`&lt;rubiks_cube::thistlethwaite::g2g4::CubePositions as core::hash::Hash&gt;::hash (12,682 samples, 15.81%)</title><rect x="58.4300%" y="53" width="15.8092%" height="15" fill="rgb(218,138,4)" fg:x="46872" fg:w="12682"/><text x="58.6800%" y="63.50">rubiks-cube`&lt;rubiks_cube..</text></g><g><title>rubiks-cube`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (15,164 samples, 18.90%)</title><rect x="74.2393%" y="53" width="18.9033%" height="15" fill="rgb(250,191,14)" fg:x="59554" fg:w="15164"/><text x="74.4893%" y="63.50">rubiks-cube`hashbrown::map::Ha..</text></g><g><title>rubiks-cube`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (13 samples, 0.02%)</title><rect x="93.4317%" y="37" width="0.0162%" height="15" fill="rgb(239,60,40)" fg:x="74950" fg:w="13"/><text x="93.6817%" y="47.50"></text></g><g><title>rubiks-cube`&lt;rubiks_cube::thistlethwaite::g2g4::CubePositions as core::hash::Hash&gt;::hash (1,938 samples, 2.42%)</title><rect x="93.4479%" y="37" width="2.4159%" height="15" fill="rgb(206,27,48)" fg:x="74963" fg:w="1938"/><text x="93.6979%" y="47.50">ru..</text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3 (72,089 samples, 89.87%)</title><rect x="8.7835%" y="245" width="89.8652%" height="15" fill="rgb(225,35,8)" fg:x="7046" fg:w="72089"/><text x="9.0335%" y="255.50">rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3</text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3::ida (72,089 samples, 89.87%)</title><rect x="8.7835%" y="229" width="89.8652%" height="15" fill="rgb(250,213,24)" fg:x="7046" fg:w="72089"/><text x="9.0335%" y="239.50">rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3::ida</text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3::ida (72,089 samples, 89.87%)</title><rect x="8.7835%" y="213" width="89.8652%" height="15" fill="rgb(247,123,22)" fg:x="7046" fg:w="72089"/><text x="9.0335%" y="223.50">rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3::ida</text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3::ida (72,089 samples, 89.87%)</title><rect x="8.7835%" y="197" width="89.8652%" height="15" fill="rgb(231,138,38)" fg:x="7046" fg:w="72089"/><text x="9.0335%" y="207.50">rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3::ida</text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3::ida (72,089 samples, 89.87%)</title><rect x="8.7835%" y="181" width="89.8652%" height="15" fill="rgb(231,145,46)" fg:x="7046" fg:w="72089"/><text x="9.0335%" y="191.50">rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3::ida</text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3::ida (72,080 samples, 89.85%)</title><rect x="8.7947%" y="165" width="89.8540%" height="15" fill="rgb(251,118,11)" fg:x="7055" fg:w="72080"/><text x="9.0447%" y="175.50">rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3::ida</text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3::ida (72,043 samples, 89.81%)</title><rect x="8.8408%" y="149" width="89.8079%" height="15" fill="rgb(217,147,25)" fg:x="7092" fg:w="72043"/><text x="9.0908%" y="159.50">rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3::ida</text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3::ida (71,863 samples, 89.58%)</title><rect x="9.0652%" y="133" width="89.5835%" height="15" fill="rgb(247,81,37)" fg:x="7272" fg:w="71863"/><text x="9.3152%" y="143.50">rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3::ida</text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3::ida (71,063 samples, 88.59%)</title><rect x="10.0625%" y="117" width="88.5862%" height="15" fill="rgb(209,12,38)" fg:x="8072" fg:w="71063"/><text x="10.3125%" y="127.50">rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3::ida</text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3::ida (67,539 samples, 84.19%)</title><rect x="14.4554%" y="101" width="84.1933%" height="15" fill="rgb(227,1,9)" fg:x="11596" fg:w="67539"/><text x="14.7054%" y="111.50">rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3::ida</text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3::ida (54,473 samples, 67.91%)</title><rect x="30.7433%" y="85" width="67.9054%" height="15" fill="rgb(248,47,43)" fg:x="24662" fg:w="54473"/><text x="30.9933%" y="95.50">rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3::ida</text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3::ida (35,076 samples, 43.73%)</title><rect x="54.9234%" y="69" width="43.7253%" height="15" fill="rgb(221,10,30)" fg:x="44059" fg:w="35076"/><text x="55.1734%" y="79.50">rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3::ida</text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g3::ida (4,417 samples, 5.51%)</title><rect x="93.1425%" y="53" width="5.5062%" height="15" fill="rgb(210,229,1)" fg:x="74718" fg:w="4417"/><text x="93.3925%" y="63.50">rubiks-..</text></g><g><title>rubiks-cube`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2,234 samples, 2.78%)</title><rect x="95.8638%" y="37" width="2.7849%" height="15" fill="rgb(222,148,37)" fg:x="76901" fg:w="2234"/><text x="96.1138%" y="47.50">ru..</text></g><g><title>rubiks-cube`&lt;T as rubiks_cube::moves::ApplyMove&gt;::apply (10 samples, 0.01%)</title><rect x="98.6587%" y="133" width="0.0125%" height="15" fill="rgb(234,67,33)" fg:x="79143" fg:w="10"/><text x="98.9087%" y="143.50"></text></g><g><title>rubiks-cube`&lt;T as rubiks_cube::moves::ApplyMove&gt;::apply (20 samples, 0.02%)</title><rect x="98.6898%" y="117" width="0.0249%" height="15" fill="rgb(247,98,35)" fg:x="79168" fg:w="20"/><text x="98.9398%" y="127.50"></text></g><g><title>rubiks-cube`&lt;T as rubiks_cube::moves::ApplyMove&gt;::apply (49 samples, 0.06%)</title><rect x="98.7447%" y="101" width="0.0611%" height="15" fill="rgb(247,138,52)" fg:x="79212" fg:w="49"/><text x="98.9947%" y="111.50"></text></g><g><title>rubiks-cube`&lt;T as rubiks_cube::moves::ApplyMove&gt;::apply (99 samples, 0.12%)</title><rect x="98.8968%" y="85" width="0.1234%" height="15" fill="rgb(213,79,30)" fg:x="79334" fg:w="99"/><text x="99.1468%" y="95.50"></text></g><g><title>rubiks-cube`&lt;T as rubiks_cube::moves::ApplyMove&gt;::apply (117 samples, 0.15%)</title><rect x="99.2608%" y="69" width="0.1459%" height="15" fill="rgb(246,177,23)" fg:x="79626" fg:w="117"/><text x="99.5108%" y="79.50"></text></g><g><title>rubiks-cube`&lt;T as rubiks_cube::moves::ApplyMove&gt;::apply (53 samples, 0.07%)</title><rect x="99.7295%" y="53" width="0.0661%" height="15" fill="rgb(230,62,27)" fg:x="80002" fg:w="53"/><text x="99.9795%" y="63.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g4 (1,083 samples, 1.35%)</title><rect x="98.6487%" y="245" width="1.3501%" height="15" fill="rgb(216,154,8)" fg:x="79135" fg:w="1083"/><text x="98.8987%" y="255.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g4::ida (1,083 samples, 1.35%)</title><rect x="98.6487%" y="229" width="1.3501%" height="15" fill="rgb(244,35,45)" fg:x="79135" fg:w="1083"/><text x="98.8987%" y="239.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g4::ida (1,083 samples, 1.35%)</title><rect x="98.6487%" y="213" width="1.3501%" height="15" fill="rgb(251,115,12)" fg:x="79135" fg:w="1083"/><text x="98.8987%" y="223.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g4::ida (1,083 samples, 1.35%)</title><rect x="98.6487%" y="197" width="1.3501%" height="15" fill="rgb(240,54,50)" fg:x="79135" fg:w="1083"/><text x="98.8987%" y="207.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g4::ida (1,083 samples, 1.35%)</title><rect x="98.6487%" y="181" width="1.3501%" height="15" fill="rgb(233,84,52)" fg:x="79135" fg:w="1083"/><text x="98.8987%" y="191.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g4::ida (1,083 samples, 1.35%)</title><rect x="98.6487%" y="165" width="1.3501%" height="15" fill="rgb(207,117,47)" fg:x="79135" fg:w="1083"/><text x="98.8987%" y="175.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g4::ida (1,080 samples, 1.35%)</title><rect x="98.6524%" y="149" width="1.3463%" height="15" fill="rgb(249,43,39)" fg:x="79138" fg:w="1080"/><text x="98.9024%" y="159.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g4::ida (1,065 samples, 1.33%)</title><rect x="98.6711%" y="133" width="1.3276%" height="15" fill="rgb(209,38,44)" fg:x="79153" fg:w="1065"/><text x="98.9211%" y="143.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g4::ida (1,030 samples, 1.28%)</title><rect x="98.7148%" y="117" width="1.2840%" height="15" fill="rgb(236,212,23)" fg:x="79188" fg:w="1030"/><text x="98.9648%" y="127.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g4::ida (957 samples, 1.19%)</title><rect x="98.8058%" y="101" width="1.1930%" height="15" fill="rgb(242,79,21)" fg:x="79261" fg:w="957"/><text x="99.0558%" y="111.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g4::ida (785 samples, 0.98%)</title><rect x="99.0202%" y="85" width="0.9786%" height="15" fill="rgb(211,96,35)" fg:x="79433" fg:w="785"/><text x="99.2702%" y="95.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g4::ida (475 samples, 0.59%)</title><rect x="99.4066%" y="69" width="0.5921%" height="15" fill="rgb(253,215,40)" fg:x="79743" fg:w="475"/><text x="99.6566%" y="79.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g4::ida (163 samples, 0.20%)</title><rect x="99.7956%" y="53" width="0.2032%" height="15" fill="rgb(211,81,21)" fg:x="80055" fg:w="163"/><text x="100.0456%" y="63.50"></text></g><g><title>rubiks-cube`rubiks_cube::thistlethwaite::g2g4::solve_to_g4::ida (26 samples, 0.03%)</title><rect x="99.9663%" y="37" width="0.0324%" height="15" fill="rgb(208,190,38)" fg:x="80192" fg:w="26"/><text x="100.2163%" y="47.50"></text></g><g><title>all (80,219 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(235,213,38)" fg:x="0" fg:w="80219"/><text x="0.2500%" y="383.50"></text></g><g><title>dyld`start (80,219 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(237,122,38)" fg:x="0" fg:w="80219"/><text x="0.2500%" y="367.50">dyld`start</text></g><g><title>rubiks-cube`main (80,219 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(244,218,35)" fg:x="0" fg:w="80219"/><text x="0.2500%" y="351.50">rubiks-cube`main</text></g><g><title>rubiks-cube`std::rt::lang_start_internal (80,219 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(240,68,47)" fg:x="0" fg:w="80219"/><text x="0.2500%" y="335.50">rubiks-cube`std::rt::lang_start_internal</text></g><g><title>rubiks-cube`std::rt::lang_start::_{{closure}} (80,219 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(210,16,53)" fg:x="0" fg:w="80219"/><text x="0.2500%" y="319.50">rubiks-cube`std::rt::lang_start::_{{closure}}</text></g><g><title>rubiks-cube`std::sys_common::backtrace::__rust_begin_short_backtrace (80,219 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(235,124,12)" fg:x="0" fg:w="80219"/><text x="0.2500%" y="303.50">rubiks-cube`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rubiks-cube`rubiks_cube::main (80,219 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(224,169,11)" fg:x="0" fg:w="80219"/><text x="0.2500%" y="287.50">rubiks-cube`rubiks_cube::main</text></g><g><title>rubiks-cube`rubiks_cube::timed::timed (80,041 samples, 99.78%)</title><rect x="0.2219%" y="261" width="99.7781%" height="15" fill="rgb(250,166,2)" fg:x="178" fg:w="80041"/><text x="0.4719%" y="271.50">rubiks-cube`rubiks_cube::timed::timed</text></g></svg></svg>